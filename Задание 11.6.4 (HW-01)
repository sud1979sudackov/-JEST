/**
 * Вычисляет среднее значение массива чисел
 * @param {number[]} numbers - Массив чисел
 * @returns {number} Среднее значение
 */
function calculateAverage(numbers) {
  if (!Array.isArray(numbers)) {
    throw new Error('Input must be an array');
  }
  
  if (numbers.length === 0) {
    throw new Error('Array cannot be empty');
  }
  
  const sum = numbers.reduce((acc, num) => {
    if (typeof num !== 'number' || isNaN(num)) {
      throw new Error('All elements must be numbers');
    }
    return acc + num;
  }, 0);
  
  return sum / numbers.length;
}

module.exports = calculateAverage;
2. Тесты (calculateAverage.test.js)
javascript
const calculateAverage = require('./calculateAverage');

describe('calculateAverage', () => {
  // Успешные тест-кейсы
  test('calculates average of positive numbers', () => {
    expect(calculateAverage([1, 2, 3, 4, 5])).toBe(3);
  });

  test('calculates average of negative numbers', () => {
    expect(calculateAverage([-1, -2, -3])).toBe(-2);
  });

  test('calculates average of mixed numbers', () => {
    expect(calculateAverage([-10, 0, 10])).toBe(0);
  });

  // Корнер-кейсы
  test('handles single number array', () => {
    expect(calculateAverage([42])).toBe(42);
  });

  test('handles floating point result', () => {
    expect(calculateAverage([1, 2])).toBeCloseTo(1.5);
  });

  // Неуспешные тест-кейсы
  test('throws error for empty array', () => {
    expect(() => calculateAverage([])).toThrow('Array cannot be empty');
  });

  test('throws error for non-array input', () => {
    expect(() => calculateAverage('not an array')).toThrow('Input must be an array');
  });

  test('throws error for array with non-numbers', () => {
    expect(() => calculateAverage([1, 'two', 3])).toThrow('All elements must be numbers');
  });

  test('throws error for array with NaN values', () => {
    expect(() => calculateAverage([1, NaN, 3])).toThrow('All elements must be numbers');
  });
});
